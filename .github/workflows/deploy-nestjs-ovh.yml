name: Deploy NestJS to OVH VPS (Production)

on:
  push:
    branches:
      - production
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:  # permet de d√©clencher manuellement

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to OVH VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY_OVH }}
          port: 2222  # ou votre port SSH personnalis√©
          script: |
            # D√©finition du r√©pertoire racine sur le VPS
            VPS_ROOT="/home/deploy/app"
            APP_DIR="${VPS_ROOT}/nestjs"

            # S'assurer que le r√©pertoire d'application existe
            mkdir -p ${APP_DIR}

            # V√©rifier l'√©tat actuel
            echo "üìÇ Contenu actuel du r√©pertoire de d√©ploiement:"
            ls -la ${APP_DIR}

            # Sauvegarde de la base de donn√©es si elle est en cours d'ex√©cution
            if [ -f "${APP_DIR}/docker-compose.prod.yml" ]; then
              cd ${APP_DIR}
              if docker-compose -f docker-compose.prod.yml ps postgres-db 2>&1 | grep -q "Up"; then
                echo "üì¶ Sauvegarde de la base de donn√©es..."
                mkdir -p ${APP_DIR}/backups
                CURRENT_DATE=$(date +"%Y%m%d_%H%M%S")
                docker-compose -f docker-compose.prod.yml exec -T postgres-db pg_dump -U postgres nestjs_db > ${APP_DIR}/backups/db_${CURRENT_DATE}.sql || echo "‚ö†Ô∏è √âchec de sauvegarde, poursuite du d√©ploiement"
              fi
            fi

            # Pr√©server les fichiers importants
            cd ${APP_DIR}
            if [ -f "${APP_DIR}/.env" ]; then
              echo "üíæ Sauvegarde du fichier .env actuel"
              cp ${APP_DIR}/.env ${APP_DIR}/.env.backup
            fi

            # Cr√©er un r√©pertoire temporaire pour le clone
            TMP_DIR=$(mktemp -d)
            echo "üìã Clonage du d√©p√¥t dans ${TMP_DIR}..."

            # Clone du d√©p√¥t GitHub (utiliser la branche production)
            git clone --depth=1 --branch=develop https://github.com/natalie-simon/assbt_api.git ${TMP_DIR}

            # V√©rifier si le clone a r√©ussi
            if [ $? -ne 0 ]; then
              echo "‚ùå √âchec du clonage du d√©p√¥t"
              exit 1
            fi

            # Nettoyer le r√©pertoire de l'application mais pr√©server .env et backups
            echo "üßπ Nettoyage du r√©pertoire de d√©ploiement..."
            find ${APP_DIR} -mindepth 1 -not -path "${APP_DIR}/backups*" -not -name ".env" -not -name ".env.backup" -not -name "docker-compose.prod.yml" -exec rm -rf {} \; 2>/dev/null || true

            # Copier les fichiers du d√©p√¥t clon√© vers le r√©pertoire de l'application
            echo "üìã Copie des fichiers du projet..."
            cp -R ${TMP_DIR}/* ${APP_DIR}/
            cp -R ${TMP_DIR}/.* ${APP_DIR}/ 2>/dev/null || true

            # Supprimer le r√©pertoire temporaire
            rm -rf ${TMP_DIR}

            # Gestion du fichier .env
            if [ ! -f "${APP_DIR}/.env" ]; then
              echo "üîç Fichier .env non trouv√©, recherche d'alternatives..."

              # V√©rifier si .env.backup existe
              if [ -f "${APP_DIR}/.env.backup" ]; then
                echo "‚úÖ Restauration du fichier .env.backup"
                cp ${APP_DIR}/.env.backup ${APP_DIR}/.env
              # V√©rifier si .env.prod existe dans le r√©pertoire racine
              elif [ -f "${VPS_ROOT}/.env.prod" ]; then
                echo "‚úÖ Copie du fichier .env.prod depuis ${VPS_ROOT}"
                cp ${VPS_ROOT}/.env.prod ${APP_DIR}/.env
              else
                echo "‚ö†Ô∏è Aucun fichier .env trouv√©! Le d√©ploiement pourrait √©chouer."
              fi
            fi

            # V√©rifier le contenu apr√®s la copie
            echo "üìÇ Contenu du r√©pertoire apr√®s copie:"
            ls -la ${APP_DIR}

            # V√©rifier que docker-compose.prod.yml existe
            if [ ! -f "${APP_DIR}/docker-compose.prod.yml" ]; then
              echo "‚ùå Fichier docker-compose.prod.yml non trouv√©!"
              exit 1
            fi

            # D√©ployer l'application
            cd ${APP_DIR}
            echo "üöÄ D√©ploiement de l'application..."
            docker-compose -f docker-compose.prod.yml down || true
            docker-compose -f docker-compose.prod.yml up -d --build

            # Attendre que les services soient pr√™ts
            echo "‚è≥ Attente du d√©marrage des services..."
            sleep 30

            # V√©rifier l'√©tat des services
            echo "üìä √âtat des services apr√®s d√©ploiement:"
            docker-compose -f docker-compose.prod.yml ps

            # Gestion des migrations
            if docker-compose -f docker-compose.prod.yml ps | grep -q "api"; then
              echo "üîÑ Gestion automatique des migrations..."
              
              # Cr√©er le dossier migrations s'il n'existe pas
              docker-compose -f docker-compose.prod.yml exec -T api mkdir -p dist/database/migrations
              
              # √âtape 1: Compiler l'application pour s'assurer que dist/ est √† jour
              echo "üî® Compilation du projet..."
              docker-compose -f docker-compose.prod.yml exec -T api npm run build
              
              # √âtape 2: G√©n√©rer une nouvelle migration
              echo "üìù G√©n√©ration d'une nouvelle migration..."
              TIMESTAMP=$(date +"%Y%m%d%H%M%S")
              docker-compose -f docker-compose.prod.yml exec -T api npx typeorm migration:generate -d dist/config/typeorm.config.js dist/database/migrations/migration_${TIMESTAMP}
              
              # √âtape 3: Ex√©cuter les migrations
              echo "üîÑ Ex√©cution des migrations..."
              docker-compose -f docker-compose.prod.yml exec -T api npx typeorm migration:run -d dist/config/typeorm.config.js
              
              # Si les migrations √©chouent, essayer la synchronisation de sch√©ma (uniquement pour les d√©ploiements initiaux)
              if [ $? -ne 0 ]; then
                echo "‚ö†Ô∏è √âchec des migrations. Tentative de synchronisation du sch√©ma..."
                docker-compose -f docker-compose.prod.yml exec -T api npx typeorm schema:sync -d dist/config/typeorm.config.js
              fi
            else
              echo "‚ö†Ô∏è Le service api n'est pas en cours d'ex√©cution, migrations ignor√©es"
            fi
            
            # V√©rifier les tables cr√©√©es
            echo "üìä V√©rification des tables de la base de donn√©es:"
            docker-compose -f docker-compose.prod.yml exec -T postgres-db psql -U postgres -d nestjs_db -c "\dt"
            
            # Afficher les logs du service API
            echo "üìÉ Logs du service NestJS:"
            docker-compose -f docker-compose.prod.yml logs --tail=50 api

            # Nettoyage
            echo "üßπ Nettoyage des images inutilis√©es..."
            docker image prune -f
