name: Deploy NestJS to OVH VPS (Production)

on:
  push:
    branches:
      - production
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:  # permet de d√©clencher manuellement

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Pas besoin de cr√©er un fichier .env, nous utiliserons celui d√©j√† sur le VPS

      - name: Deploy to OVH VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY_OVH }}
          port: 2222  # ou votre port SSH personnalis√©
          script: |
            # Se rendre dans le r√©pertoire de d√©ploiement
            cd ~/app

            # Sauvegarde de la base de donn√©es si l'application est d√©j√† en cours d'ex√©cution
            if [ -d "~/app/nestjs" ] && [ -f "~/app/nestjs/docker-compose.prod.yml" ]; then
              cd ~/app/nestjs
              if docker-compose -f docker-compose.prod.yml ps postgres 2>&1 | grep -q "Up"; then
                echo "üì¶ Sauvegarde de la base de donn√©es..."
                mkdir -p ./backups
                docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U ${POSTGRES_USER:-appuser} ${POSTGRES_DB:-nestjs_db} > ./backups/db_$(date +"%Y%m%d_%H%M%S").sql
              fi
            fi

            # Cr√©ation du r√©pertoire s'il n'existe pas
            mkdir -p ~/app/nestjs

            # Copier les fichiers n√©cessaires pour l'application NestJS
            rsync -av --exclude 'node_modules' --exclude '.git' /tmp/github-actions-runner/_work/${{ github.repository }}/${{ github.repository }}/ ~/app/nestjs/

            # Utiliser le fichier .env.prod existant sur le VPS
            if [ -f "/app/.env.prod" ]; then
              cp /app/.env.prod ~/app/nestjs/.env
              echo "‚úÖ Fichier .env.prod copi√© vers .env"
            else
              echo "‚ö†Ô∏è Fichier .env.prod non trouv√© √† l'emplacement /app/.env.prod"
            fi

            # Se d√©placer dans le r√©pertoire de l'application
            cd ~/app/nestjs

            # Construire et d√©marrer les conteneurs
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d --build

            # Attendre que les services soient pr√™ts
            echo "‚è≥ Attente du d√©marrage des services..."
            sleep 20

            # Ex√©cuter les migrations TypeORM
            docker-compose -f docker-compose.prod.yml exec -T api npm run migration:run

            # V√©rifier que les conteneurs sont bien d√©marr√©s
            docker ps

            # Nettoyage
            docker image prune -f