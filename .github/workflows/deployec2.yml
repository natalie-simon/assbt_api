name: CI/CD Docker Dev Deployment

on:
  push:
    branches:
      - develop # Uniquement la branche develop

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}-api:develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Ensure deploy directory exists on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} "mkdir -p /home/ubuntu/apps/bulleurs-toulonnais"

      - name: Create necessary directories on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} << EOF
            mkdir -p /home/ubuntu/apps/bulleurs-toulonnais/nginx/conf.d
            mkdir -p /home/ubuntu/apps/bulleurs-toulonnais/certbot/conf
            mkdir -p /home/ubuntu/apps/bulleurs-toulonnais/certbot/www
          EOF

      - name: Copy deployment files to EC2
        run: |
          # Copier les fichiers de déploiement depuis le répertoire deploy
          scp -i ~/.ssh/id_rsa ./deploy/docker-compose.yml ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/apps/bulleurs-toulonnais/
          scp -i ~/.ssh/id_rsa ./deploy/deploy.sh ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/apps/bulleurs-toulonnais/
          scp -i ~/.ssh/id_rsa ./deploy/init-letsencrypt.sh ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/apps/bulleurs-toulonnais/
          
          # Copier le fichier de configuration Nginx
          scp -i ~/.ssh/id_rsa ./deploy/nginx/conf.d/default.conf ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/apps/bulleurs-toulonnais/nginx/conf.d/
          
          # Remplacer l'adresse email dans le script init-letsencrypt.sh
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} << EOF
            cd /home/ubuntu/apps/bulleurs-toulonnais/
            sed -i "s/votre-email@example.com/${{ secrets.ADMIN_EMAIL }}/g" init-letsencrypt.sh
          EOF

      - name: Create .env file on EC2
        run: |
          cat > .env << EOF
          NODE_ENV=production
          TAG=develop
          GITHUB_REPOSITORY=${{ github.repository }}
          
          # Database
          DB_HOST=postgres-db
          DB_PORT=5432
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          
          # API
          LISTEN_PORT=3000
          API_PORT=3000
          
          # AWS S3
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          
          # Deploy
          EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          DOMAIN_NAME=api-assbt-test.lesbulleurstoulonnais.fr
          RUN_MIGRATIONS=true
          EOF
          
          scp -i ~/.ssh/id_rsa .env ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/apps/bulleurs-toulonnais/

      - name: Deploy to EC2 with correct PATH
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # S'assurer que le PATH inclut /usr/bin
            export PATH="/usr/bin:$PATH"
            
            cd /home/ubuntu/apps/bulleurs-toulonnais/
            chmod +x deploy.sh
            chmod +x init-letsencrypt.sh
            
            # Vérifier que Docker est disponible
            which docker
            docker --version
            
            # Vérifier que Docker Compose est disponible
            which docker-compose
            docker-compose --version
            
            # Exécuter le déploiement
            ./deploy.sh develop
          EOF

      - name: Verify deployment
        run: |
          # Attendre que les services démarrent
          sleep 30
          
          # Vérifier le statut des containers
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            export PATH="/usr/bin:$PATH"
            cd /home/ubuntu/apps/bulleurs-toulonnais/
            
            echo "Liste des conteneurs Docker:"
            docker ps
            
            echo "Logs Nginx:"
            docker-compose logs --tail=20 nginx
            
            echo "Logs Certbot:"
            docker-compose logs --tail=20 certbot
            
            echo "Test configuration Nginx:"
            docker-compose exec -T nginx nginx -t
          EOF

      - name: Send success email
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{secrets.SMTP_ADRESS}}
          server_port: ${{secrets.SMTP_PORT}}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Déploiement Docker réussi sur l'environnement de test (HTTPS)"
          body: "Le déploiement Docker de l'API sur l'environnement de test a été effectué avec succès. L'application est accessible via https://api-assbt-test.lesbulleurstoulonnais.fr"
          to: ybah2201@gmail.com
          from: ybah2201@gmail.com

      - name: Send failure email
        if: failure()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{secrets.SMTP_ADRESS}}
          server_port: ${{secrets.SMTP_PORT}}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Echec de déploiement Docker sur l'environnement de test (HTTPS)"
          body: "Le déploiement Docker de l'API sur l'environnement de test a échoué."
          to: ybah2201@gmail.com
          from: ybah2201@gmail.com