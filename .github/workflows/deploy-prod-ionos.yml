name: Deploy NestJS with Prisma to IONOS VPS (Production)

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.should_deploy }}
      commit_hash: ${{ steps.check_changes.outputs.commit_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 2

      - name: Check for changes
        id: check_changes
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "commit_hash=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ D√©ploiement forc√© activ√©"
            exit 0
          fi
          
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -qE "\.(md|txt|yml)$|^\.github/|^docs/"; then
            if ! echo "$CHANGED_FILES" | grep -qE "\.(js|ts|json|prisma|docker)$|^src/|^prisma/"; then
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è Seuls des fichiers non critiques ont chang√©"
              exit 0
            fi
          fi
          
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Run tests
        if: ${{ github.event.inputs.skip_tests != 'true' && steps.check_changes.outputs.should_deploy == 'true' }}
        run: |
          npm ci
          npm run lint
          npm run build
          #npm run test

  deploy:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Notify deployment start
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"üöÄ D√©ploiement PRODUCTION Started\",\"description\":\"Branch: master\\nCommit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nTarget: IONOS VPS\",\"color\":3447003}]}"
          fi

      - name: Deploy to IONOS VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.IONOS_VPS_HOST }}
          username: ${{ secrets.IONOS_VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY_IONOS }}
          port: ${{ secrets.IONOS_SSH_PORT }}
          timeout: 900s
          script: |
            set -e
            VPS_ROOT="/home/${{ secrets.IONOS_VPS_USER }}/production"
            APP_DIR="${VPS_ROOT}/nestjs-prisma-prod"
            DEPLOY_LOG="${APP_DIR}/deploy-prod.log"
            CURRENT_COMMIT="${{ needs.pre-deploy-checks.outputs.commit_hash }}"
            
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$DEPLOY_LOG"
            }
            
            deploy_failed() {
              log "‚ùå D√©ploiement PRODUCTION √©chou√© √† l'√©tape: $1"
              if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
                curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                  -H 'Content-type: application/json' \
                  --data "{\"embeds\":[{\"title\":\"‚ùå D√©ploiement PRODUCTION Failed\",\"description\":\"Erreur: $1\\nCommit: \`$CURRENT_COMMIT\`\\nTarget: IONOS VPS\",\"color\":15158332}]}"
              fi
              exit 1
            }
            
            trap 'deploy_failed "Script interrompu"' ERR
            log "üöÄ D√©marrage du d√©ploiement PRODUCTION optimis√© - Commit: $CURRENT_COMMIT"
            
            mkdir -p "$APP_DIR" "$APP_DIR/backups"
            cd "$APP_DIR"
            
            LAST_DEPLOY_COMMIT=$(cat "${APP_DIR}/.last_deploy" 2>/dev/null || echo "")
            if [ "$CURRENT_COMMIT" = "$LAST_DEPLOY_COMMIT" ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              log "‚è≠Ô∏è M√™me commit d√©tect√© ($CURRENT_COMMIT), skip du d√©ploiement"
              exit 0
            fi
            
            log "üìã Phase 1: Validation de l'environnement PRODUCTION"
            if [ -f "${APP_DIR}/.env.prod.ionos" ]; then
              source "${APP_DIR}/.env.prod.ionos"
            else
              log "‚ö†Ô∏è Fichier .env.prod.ionos manquant - cr√©ation n√©cessaire"
              deploy_failed "Fichier .env.prod.ionos manquant"
            fi
            
            # V√©rification des variables critiques
            if [ -z "$DATABASE_URL" ] || [ -z "$JWT_SECRET" ]; then
              deploy_failed "Variables d'environnement critiques manquantes"
            fi
            
            log "üßπ Phase 2: Sauvegarde et nettoyage PRODUCTION"
            if docker-compose -f docker-compose.prod.ionos.yml ps -q > /dev/null 2>&1; then
              log "üíæ Sauvegarde √©tat actuel PRODUCTION"
              docker-compose -f docker-compose.prod.ionos.yml down
            fi
            docker rm -f postgres_prod_db traefik_prod api_prod nestjs_api_prod 2>/dev/null || true
            
            log "üì¶ Phase 3: Mise √† jour du code PRODUCTION"
            TMP_DIR=$(mktemp -d)
            git clone --filter=blob:none --depth=1 --branch=master https://github.com/natalie-simon/assbt_api.git "$TMP_DIR"
            cd "$APP_DIR"
            find . -mindepth 1 \
              -not -path "./backups*" \
              -not -name ".env.prod.ionos*" \
              -not -name ".last_deploy*" \
              -not -name "deploy-prod.log*" \
              -exec rm -rf {} \; 2>/dev/null || true
            cp -R "$TMP_DIR"/* "$APP_DIR"/
            cp -R "$TMP_DIR"/.* "$APP_DIR"/ 2>/dev/null || true
            rm -rf "$TMP_DIR"
            
            log "üê≥ Phase 4: Build et d√©marrage des services PRODUCTION"
            cd "$APP_DIR"
            docker-compose -f docker-compose.prod.ionos.yml build --parallel || deploy_failed "√âchec du build Docker"
            docker-compose -f docker-compose.prod.ionos.yml up -d db || deploy_failed "√âchec DB"
            
            RETRIES=30; RETRY_COUNT=0
            until docker-compose -f docker-compose.prod.ionos.yml exec -T db pg_isready -q || [ $RETRY_COUNT -eq $RETRIES ]; do
              log "üîÑ Attente PostgreSQL PRODUCTION... ($((RETRY_COUNT+1))/$RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 3
            done
            
            if [ $RETRY_COUNT -eq $RETRIES ]; then
              deploy_failed "Base de donn√©es PostgreSQL non accessible"
            fi
            
            docker-compose -f docker-compose.prod.ionos.yml up -d || deploy_failed "√âchec d√©marrage services"
            
            log "üîÑ Phase 5: Syst√®me de migration PRODUCTION ULTRA-S√âCURIS√â (Z√©ro perte de donn√©es)"
            docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma generate || deploy_failed "√âchec generate"
            
            # Fonction de sauvegarde multi-niveaux PRODUCTION
            create_production_backup() {
              local backup_timestamp=$(date +%Y%m%d_%H%M%S)
              local backup_dir="backups/prod_backup_$backup_timestamp"
              
              log "üîí PRODUCTION BACKUP CRITIQUE - Sauvegarde multi-niveaux"
              mkdir -p "$backup_dir"
              
              # 1. Sauvegarde SQL compl√®te
              log "üì¶ 1/5 Sauvegarde SQL compl√®te PRODUCTION..."
              if docker-compose -f docker-compose.prod.ionos.yml exec -T db pg_dump -U postgres -v postgres > "$backup_dir/full_database.sql"; then
                BACKUP_SIZE=$(ls -lh "$backup_dir/full_database.sql" | awk '{print $5}')
                log "‚úÖ Sauvegarde SQL PRODUCTION: $BACKUP_SIZE"
              else
                log "‚ùå √âCHEC SAUVEGARDE SQL - ARR√äT IMM√âDIAT"
                deploy_failed "Sauvegarde SQL √©chou√©e - donn√©es critiques PRODUCTION"
              fi
              
              # 2. Sauvegarde sch√©ma seul
              log "üìã 2/5 Sauvegarde du sch√©ma PRODUCTION..."
              docker-compose -f docker-compose.prod.ionos.yml exec -T db pg_dump -U postgres -s postgres > "$backup_dir/schema_only.sql" || log "‚ö†Ô∏è √âchec sch√©ma"
              
              # 3. Sauvegarde donn√©es seules
              log "üíæ 3/5 Sauvegarde des donn√©es PRODUCTION..."
              docker-compose -f docker-compose.prod.ionos.yml exec -T db pg_dump -U postgres -a postgres > "$backup_dir/data_only.sql" || log "‚ö†Ô∏è √âchec donn√©es"
              
              # 4. √âtat des migrations Prisma
              log "üîç 4/5 √âtat des migrations PRODUCTION..."
              docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma migrate status > "$backup_dir/migration_status.txt" 2>&1 || log "‚ö†Ô∏è √âchec statut"
              
              # 5. M√©tadonn√©es du d√©ploiement
              log "üìù 5/5 M√©tadonn√©es du d√©ploiement..."
              echo "Commit: $CURRENT_COMMIT" > "$backup_dir/deployment_info.txt"
              echo "Date: $(date)" >> "$backup_dir/deployment_info.txt"
              echo "Branch: master" >> "$backup_dir/deployment_info.txt"
              echo "Environment: PRODUCTION" >> "$backup_dir/deployment_info.txt"
              
              # V√©rification int√©grit√© RENFORC√âE
              log "üîç V√©rification int√©grit√© des sauvegardes PRODUCTION..."
              if [ -s "$backup_dir/full_database.sql" ] && [ $(wc -l < "$backup_dir/full_database.sql") -gt 10 ]; then
                log "‚úÖ Sauvegarde PRODUCTION valid√©e: $backup_dir"
                echo "$backup_dir" > ".last_backup_path"
                return 0
              else
                log "‚ùå SAUVEGARDE CORROMPUE - ARR√äT CRITIQUE"
                deploy_failed "Sauvegarde invalide - protection des donn√©es PRODUCTION"
              fi
            }
            
            # Fonction de restauration d'urgence PRODUCTION
            emergency_restore() {
              local backup_path="$1"
              log "üö® RESTAURATION D'URGENCE PRODUCTION depuis $backup_path"
              
              if [ -f "$backup_path/full_database.sql" ]; then
                log "üîÑ Restauration de la base compl√®te PRODUCTION..."
                docker-compose -f docker-compose.prod.ionos.yml exec -T db psql -U postgres -c "DROP DATABASE IF EXISTS postgres_restore_prod;"
                docker-compose -f docker-compose.prod.ionos.yml exec -T db psql -U postgres -c "CREATE DATABASE postgres_restore_prod;"
                docker-compose -f docker-compose.prod.ionos.yml exec -T db psql -U postgres postgres_restore_prod < "$backup_path/full_database.sql"
                log "‚úÖ Base PRODUCTION restaur√©e en postgres_restore_prod - v√©rifiez avant de basculer"
                return 0
              else
                log "‚ùå Sauvegarde PRODUCTION introuvable"
                return 1
              fi
            }
            
            # Ex√©cution de la sauvegarde PRODUCTION
            create_production_backup
            
            # D√©ploiement PRODUCTION ULTRA-S√âCURIS√â
            deploy_production_safe() {
              local backup_path=$(cat ".last_backup_path" 2>/dev/null || echo "")
              local attempt=0
              local max_attempts=2  # Tr√®s r√©duit pour production
              
              log "üîí D√âPLOIEMENT PRODUCTION ULTRA-S√âCURIS√â - Mode conservatif maximal"
              
              # Validation pr√©alable RENFORC√âE
              log "üîç Phase 1: Validation pr√©alable PRODUCTION"
              CURRENT_STATUS=$(docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma migrate status 2>&1)
              
              if echo "$CURRENT_STATUS" | grep -q "Database schema is up to date"; then
                log "‚úÖ Base PRODUCTION d√©j√† synchronis√©e - Aucune migration requise"
                return 0
              fi
              
              # Lister les migrations en attente avec validation STRICTE
              log "üìã Phase 2: Analyse des migrations en attente PRODUCTION"
              PENDING_MIGRATIONS=$(echo "$CURRENT_STATUS" | grep -A20 "pending migration" | grep -E "[0-9]{14}_" || echo "")
              
              if [ -z "$PENDING_MIGRATIONS" ]; then
                log "‚ö†Ô∏è Aucune migration en attente d√©tect√©e PRODUCTION"
                
                # V√©rification des migrations √©chou√©es avec protection maximale
                if echo "$CURRENT_STATUS" | grep -q "failed migration\|P3009"; then
                  log "üö® MIGRATIONS √âCHOU√âES D√âTECT√âES EN PRODUCTION"
                  log "üõë ARR√äT S√âCURIS√â IMM√âDIAT - Intervention manuelle OBLIGATOIRE"
                  log "üíæ Sauvegarde disponible: $backup_path"
                  deploy_failed "Migrations √©chou√©es d√©tect√©es - intervention manuelle requise"
                else
                  log "üîç Tentative de synchronisation douce PRODUCTION"
                  if docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma migrate deploy; then
                    log "‚úÖ Synchronisation PRODUCTION r√©ussie"
                    return 0
                  else
                    log "‚ùå Synchronisation PRODUCTION √©chou√©e"
                    log "üõë ARR√äT S√âCURIS√â"
                    return 1
                  fi
                fi
              fi
              
              # Application s√©curis√©e des migrations en attente avec monitoring MAXIMAL
              log "üîÑ Phase 3: Application ULTRA-S√âCURIS√âE des migrations PRODUCTION"
              log "üìã Migrations √† appliquer en PRODUCTION:"
              echo "$PENDING_MIGRATIONS" | while read -r migration; do
                [ -n "$migration" ] && log "  - $migration"
              done
              
              # Demande de confirmation automatique bypass (en production on fait confiance au code)
              log "‚ö†Ô∏è Application des migrations en cours..."
              
              # Application avec monitoring MAXIMAL
              if docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma migrate deploy 2>&1 | tee production_migration.log; then
                if grep -q "successfully applied\|All migrations have been applied" production_migration.log; then
                  log "‚úÖ TOUTES LES MIGRATIONS PRODUCTION APPLIQU√âES AVEC SUCC√àS"
                  
                  # V√©rification post-migration RENFORC√âE
                  log "üîç V√©rification post-migration PRODUCTION"
                  FINAL_STATUS=$(docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma migrate status 2>&1)
                  if echo "$FINAL_STATUS" | grep -q "Database schema is up to date"; then
                    log "‚úÖ D√âPLOIEMENT PRODUCTION ULTRA-S√âCURIS√â R√âUSSI"
                    rm -f production_migration.log
                    return 0
                  else
                    log "‚ö†Ô∏è Statut final incertain PRODUCTION"
                    cat production_migration.log
                    rm -f production_migration.log
                    return 1
                  fi
                else
                  log "‚ö†Ô∏è Migrations PRODUCTION partiellement appliqu√©es"
                  cat production_migration.log
                  rm -f production_migration.log
                  return 1
                fi
              else
                log "‚ùå √âCHEC CRITIQUE D'APPLICATION DES MIGRATIONS PRODUCTION"
                log "üîç Analyse des erreurs:"
                cat production_migration.log | tail -10
                
                log "üõë ARR√äT S√âCURIS√â CRITIQUE POUR PROTECTION DES DONN√âES PRODUCTION"
                log "üíæ Sauvegarde PRODUCTION disponible: $backup_path"
                log "üîß Intervention manuelle OBLIGATOIRE"
                
                rm -f production_migration.log
                return 1
              fi
            }
            
            # Ex√©cution du d√©ploiement PRODUCTION
            if deploy_production_safe; then
              log "‚úÖ D√âPLOIEMENT PRODUCTION ULTRA-S√âCURIS√â R√âUSSI - Donn√©es pr√©serv√©es"
              
              # Nettoyage des anciennes sauvegardes (garde les 10 derni√®res pour PRODUCTION)
              log "üßπ Maintenance des sauvegardes PRODUCTION"
              find backups/ -name "prod_backup_*" -type d | sort -r | tail -n +11 | xargs rm -rf 2>/dev/null || true
              log "‚úÖ Maintenance des sauvegardes PRODUCTION termin√©e"
            else
              log "‚ùå D√âPLOIEMENT PRODUCTION CRITIQUE √âCHOU√â"
              BACKUP_PATH=$(cat ".last_backup_path" 2>/dev/null || echo "AUCUNE")
              log "üíæ Sauvegarde PRODUCTION disponible: $BACKUP_PATH"
              log "üîß Pour restauration d'urgence PRODUCTION:"
              log "   1. Connectez-vous au serveur IONOS"
              log "   2. Utilisez: docker-compose exec db psql -U postgres < $BACKUP_PATH/full_database.sql"
              log "   3. Red√©marrez l'application"
              log "   4. Contactez l'√©quipe technique imm√©diatement"
              
              deploy_failed "√âchec d√©ploiement PRODUCTION CRITIQUE - Donn√©es intactes"
            fi
            
            # V√©rifications post-d√©ploiement PRODUCTION
            log "üîç Phase 6: V√©rifications post-d√©ploiement PRODUCTION"
            
            # V√©rification finale du sch√©ma
            log "üîç V√©rification finale du sch√©ma PRODUCTION"
            docker-compose -f docker-compose.prod.ionos.yml exec -T api npx prisma migrate status || log "‚ö†Ô∏è Impossible de v√©rifier le statut final"
            
            # Test de sant√© de l'API
            log "üè• Test de sant√© de l'API PRODUCTION"
            sleep 15
            if docker-compose -f docker-compose.prod.ionos.yml exec -T api curl -f http://localhost:3000/health > /dev/null 2>&1; then
              log "‚úÖ API PRODUCTION accessible"
            else
              log "‚ö†Ô∏è API PRODUCTION non accessible - v√©rification manuelle requise"
            fi
            
            # V√©rification des logs
            log "üìã V√©rification des logs de l'API PRODUCTION"
            docker-compose -f docker-compose.prod.ionos.yml logs --tail=20 api | grep -E "(error|Error|ERROR)" || log "‚úÖ Aucune erreur d√©tect√©e dans les logs"
            
            echo "$CURRENT_COMMIT" > "${APP_DIR}/.last_deploy"
            docker image prune -f > /dev/null 2>&1
            docker volume prune -f > /dev/null 2>&1
            
            log "‚úÖ D√©ploiement PRODUCTION termin√© avec succ√®s - Commit: $CURRENT_COMMIT"

      - name: Notify deployment success
        if: success()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"‚úÖ D√©ploiement PRODUCTION Success\",\"description\":\"Branch: master\\nCommit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nTarget: IONOS VPS\\nAPI PRODUCTION accessible\",\"color\":65280}]}"
          fi

      - name: Notify deployment failure
        if: failure()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"üö® D√©ploiement PRODUCTION CRITICAL FAILURE\",\"description\":\"Branch: master\\nCommit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nTarget: IONOS VPS\\nINTERVENTION MANUELLE REQUISE\",\"color\":15158332}]}"
          fi