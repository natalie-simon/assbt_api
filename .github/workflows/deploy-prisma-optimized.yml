name: Deploy NestJS with Prisma to OVH VPS (Optimized)

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.should_deploy }}
      commit_hash: ${{ steps.check_changes.outputs.commit_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 2

      - name: Check for changes
        id: check_changes
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "commit_hash=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ D√©ploiement forc√© activ√©"
            exit 0
          fi
          
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -qE "\.(md|txt|yml)$|^\.github/|^docs/"; then
            if ! echo "$CHANGED_FILES" | grep -qE "\.(js|ts|json|prisma|docker)$|^src/|^prisma/"; then
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è Seuls des fichiers non critiques ont chang√©"
              exit 0
            fi
          fi
          
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Run tests
        if: ${{ github.event.inputs.skip_tests != 'true' && steps.check_changes.outputs.should_deploy == 'true' }}
        run: |
          npm ci
          npm run lint
          #npm run test

  deploy:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Notify deployment start
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"üöÄ D√©ploiement Started\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\",\"color\":3447003}]}"
          fi

      - name: Deploy to OVH VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY_OVH }}
          port: 2222
          timeout: 600s
          script: |
            set -e
            VPS_ROOT="/home/deploy/app"
            APP_DIR="${VPS_ROOT}/nestjs-prisma"
            DEPLOY_LOG="${APP_DIR}/deploy.log"
            CURRENT_COMMIT="${{ needs.pre-deploy-checks.outputs.commit_hash }}"
            
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$DEPLOY_LOG"
            }
            
            deploy_failed() {
              log "‚ùå D√©ploiement √©chou√© √† l'√©tape: $1"
              if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
                curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                  -H 'Content-type: application/json' \
                  --data "{\"embeds\":[{\"title\":\"‚ùå D√©ploiement Failed\",\"description\":\"Erreur: $1\\nCommit: \`$CURRENT_COMMIT\`\",\"color\":15158332}]}"
              fi
              exit 1
            }
            
            trap 'deploy_failed "Script interrompu"' ERR
            log "üöÄ D√©marrage du d√©ploiement optimis√© - Commit: $CURRENT_COMMIT"
            
            mkdir -p "$APP_DIR" "$APP_DIR/backups"
            cd "$APP_DIR"
            
            LAST_DEPLOY_COMMIT=$(cat "${APP_DIR}/.last_deploy" 2>/dev/null || echo "")
            if [ "$CURRENT_COMMIT" = "$LAST_DEPLOY_COMMIT" ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              log "‚è≠Ô∏è M√™me commit d√©tect√© ($CURRENT_COMMIT), skip du d√©ploiement"
              exit 0
            fi
            
            log "üìã Phase 1: Validation de l'environnement"
            if [ -f "${APP_DIR}/.env.dev" ]; then
              source "${APP_DIR}/.env.dev"
            fi
            
            log "üßπ Phase 2: Sauvegarde et nettoyage"
            if docker-compose -f docker-compose.prisma.yml ps -q > /dev/null 2>&1; then
              log "üíæ Sauvegarde √©tat actuel"
              docker-compose -f docker-compose.prisma.yml down
            fi
            docker rm -f postgres_db traefik api nestjs_api 2>/dev/null || true
            
            log "üì¶ Phase 3: Mise √† jour du code"
            TMP_DIR=$(mktemp -d)
            git clone --filter=blob:none --depth=1 --branch=develop https://github.com/natalie-simon/assbt_api.git "$TMP_DIR"
            cd "$APP_DIR"
            find . -mindepth 1 \
              -not -path "./backups*" \
              -not -name ".env.dev*" \
              -not -name ".last_deploy*" \
              -not -name "deploy.log*" \
              -exec rm -rf {} \; 2>/dev/null || true
            cp -R "$TMP_DIR"/* "$APP_DIR"/
            cp -R "$TMP_DIR"/.* "$APP_DIR"/ 2>/dev/null || true
            rm -rf "$TMP_DIR"
            
            log "üê≥ Phase 4: Build et d√©marrage des services"
            cd "$APP_DIR"
            docker-compose -f docker-compose.prisma.yml build --parallel || deploy_failed "√âchec du build Docker"
            docker-compose -f docker-compose.prisma.yml up -d db || deploy_failed "√âchec DB"
            
            RETRIES=20; RETRY_COUNT=0
            until docker-compose -f docker-compose.prisma.yml exec -T db pg_isready -q || [ $RETRY_COUNT -eq $RETRIES ]; do
              log "üîÑ Attente PostgreSQL... ($((RETRY_COUNT+1))/$RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 3
            done
            
            docker-compose -f docker-compose.prisma.yml up -d || deploy_failed "√âchec d√©marrage services"
            
            log "üîÑ Phase 5: Gestion des migrations Prisma"
            docker-compose -f docker-compose.prisma.yml exec -T api npx prisma generate || deploy_failed "√âchec generate"
            
            MIGRATIONS_COUNT=$(docker-compose -f docker-compose.prisma.yml exec -T api sh -c "ls prisma/migrations 2>/dev/null | wc -l" || echo "0")
            
            if [ "$MIGRATIONS_COUNT" -gt "0" ]; then
              log "üîÑ D√©ploiement des migrations existantes"
              docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy || log "‚ö†Ô∏è √âchec migrate deploy"
            else
              log "‚ö†Ô∏è Aucune migration trouv√©e ‚Üí g√©n√©ration auto"
              docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate dev --name auto_deploy --create-only
              docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy
            fi
            
            echo "$CURRENT_COMMIT" > "${APP_DIR}/.last_deploy"
            docker image prune -f > /dev/null 2>&1
            docker volume prune -f > /dev/null 2>&1
            
            log "‚úÖ D√©ploiement termin√© avec succ√®s - Commit: $CURRENT_COMMIT"

      - name: Notify deployment success
        if: success()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"‚úÖ D√©ploiement Success\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nAPI accessible\",\"color\":65280}]}"
          fi

      - name: Notify deployment failure
        if: failure()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"‚ùå D√©ploiement Failed\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nVoir les logs pour plus de d√©tails\",\"color\":15158332}]}"
          fi
