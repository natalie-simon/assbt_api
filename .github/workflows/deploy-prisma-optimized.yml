name: Deploy NestJS with Prisma to OVH VPS (Optimized)

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.should_deploy }}
      commit_hash: ${{ steps.check_changes.outputs.commit_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 2

      - name: Check for changes
        id: check_changes
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "commit_hash=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ D√©ploiement forc√© activ√©"
            exit 0
          fi
          
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -qE "\.(md|txt|yml)$|^\.github/|^docs/"; then
            if ! echo "$CHANGED_FILES" | grep -qE "\.(js|ts|json|prisma|docker)$|^src/|^prisma/"; then
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è Seuls des fichiers non critiques ont chang√©"
              exit 0
            fi
          fi
          
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Run tests
        if: ${{ github.event.inputs.skip_tests != 'true' && steps.check_changes.outputs.should_deploy == 'true' }}
        run: |
          npm ci
          npm run lint
          #npm run test

  deploy:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Notify deployment start
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"üöÄ D√©ploiement Started\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\",\"color\":3447003}]}"
          fi

      - name: Deploy to OVH VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY_OVH }}
          port: 2222
          timeout: 600s
          script: |
            set -e
            VPS_ROOT="/home/deploy/app"
            APP_DIR="${VPS_ROOT}/nestjs-prisma"
            DEPLOY_LOG="${APP_DIR}/deploy.log"
            CURRENT_COMMIT="${{ needs.pre-deploy-checks.outputs.commit_hash }}"
            
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$DEPLOY_LOG"
            }
            
            deploy_failed() {
              log "‚ùå D√©ploiement √©chou√© √† l'√©tape: $1"
              if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
                curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                  -H 'Content-type: application/json' \
                  --data "{\"embeds\":[{\"title\":\"‚ùå D√©ploiement Failed\",\"description\":\"Erreur: $1\\nCommit: \`$CURRENT_COMMIT\`\",\"color\":15158332}]}"
              fi
              exit 1
            }
            
            trap 'deploy_failed "Script interrompu"' ERR
            log "üöÄ D√©marrage du d√©ploiement optimis√© - Commit: $CURRENT_COMMIT"
            
            mkdir -p "$APP_DIR" "$APP_DIR/backups"
            cd "$APP_DIR"
            
            LAST_DEPLOY_COMMIT=$(cat "${APP_DIR}/.last_deploy" 2>/dev/null || echo "")
            if [ "$CURRENT_COMMIT" = "$LAST_DEPLOY_COMMIT" ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              log "‚è≠Ô∏è M√™me commit d√©tect√© ($CURRENT_COMMIT), skip du d√©ploiement"
              exit 0
            fi
            
            log "üìã Phase 1: Validation de l'environnement"
            if [ -f "${APP_DIR}/.env.dev" ]; then
              source "${APP_DIR}/.env.dev"
            fi
            
            log "üßπ Phase 2: Sauvegarde et nettoyage"
            if docker-compose -f docker-compose.prisma.yml ps -q > /dev/null 2>&1; then
              log "üíæ Sauvegarde √©tat actuel"
              docker-compose -f docker-compose.prisma.yml down
            fi
            docker rm -f postgres_db traefik api nestjs_api 2>/dev/null || true
            
            log "üì¶ Phase 3: Mise √† jour du code"
            TMP_DIR=$(mktemp -d)
            git clone --filter=blob:none --depth=1 --branch=develop https://github.com/natalie-simon/assbt_api.git "$TMP_DIR"
            cd "$APP_DIR"
            find . -mindepth 1 \
              -not -path "./backups*" \
              -not -name ".env.dev*" \
              -not -name ".last_deploy*" \
              -not -name "deploy.log*" \
              -exec rm -rf {} \; 2>/dev/null || true
            cp -R "$TMP_DIR"/* "$APP_DIR"/
            cp -R "$TMP_DIR"/.* "$APP_DIR"/ 2>/dev/null || true
            rm -rf "$TMP_DIR"
            
            log "üê≥ Phase 4: Build et d√©marrage des services"
            cd "$APP_DIR"
            docker-compose -f docker-compose.prisma.yml build --parallel || deploy_failed "√âchec du build Docker"
            docker-compose -f docker-compose.prisma.yml up -d db || deploy_failed "√âchec DB"
            
            RETRIES=20; RETRY_COUNT=0
            until docker-compose -f docker-compose.prisma.yml exec -T db pg_isready -q || [ $RETRY_COUNT -eq $RETRIES ]; do
              log "üîÑ Attente PostgreSQL... ($((RETRY_COUNT+1))/$RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 3
            done
            
            docker-compose -f docker-compose.prisma.yml up -d || deploy_failed "√âchec d√©marrage services"
            
            log "üîÑ Phase 5: Syst√®me de migration PRODUCTION (Z√©ro perte de donn√©es)"
            docker-compose -f docker-compose.prisma.yml exec -T api npx prisma generate || deploy_failed "√âchec generate"
            
            # Fonction de sauvegarde multi-niveaux PRODUCTION
            create_production_backup() {
              local backup_timestamp=$(date +%Y%m%d_%H%M%S)
              local backup_dir="backups/prod_backup_$backup_timestamp"
              
              log "üîí PRODUCTION BACKUP - Sauvegarde multi-niveaux"
              mkdir -p "$backup_dir"
              
              # 1. Sauvegarde SQL compl√®te
              log "üì¶ 1/4 Sauvegarde SQL compl√®te..."
              if docker-compose -f docker-compose.prisma.yml exec -T db pg_dump -U postgres -v postgres > "$backup_dir/full_database.sql"; then
                BACKUP_SIZE=$(ls -lh "$backup_dir/full_database.sql" | awk '{print $5}')
                log "‚úÖ Sauvegarde SQL: $BACKUP_SIZE"
              else
                log "‚ùå √âCHEC SAUVEGARDE SQL - ARR√äT IMM√âDIAT"
                deploy_failed "Sauvegarde SQL √©chou√©e - donn√©es critiques"
              fi
              
              # 2. Sauvegarde sch√©ma seul
              log "üìã 2/4 Sauvegarde du sch√©ma..."
              docker-compose -f docker-compose.prisma.yml exec -T db pg_dump -U postgres -s postgres > "$backup_dir/schema_only.sql" || log "‚ö†Ô∏è √âchec sch√©ma"
              
              # 3. Sauvegarde donn√©es seules
              log "üíæ 3/4 Sauvegarde des donn√©es..."
              docker-compose -f docker-compose.prisma.yml exec -T db pg_dump -U postgres -a postgres > "$backup_dir/data_only.sql" || log "‚ö†Ô∏è √âchec donn√©es"
              
              # 4. √âtat des migrations Prisma
              log "üîç 4/4 √âtat des migrations..."
              docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status > "$backup_dir/migration_status.txt" 2>&1 || log "‚ö†Ô∏è √âchec statut"
              
              # V√©rification int√©grit√©
              log "üîç V√©rification int√©grit√© des sauvegardes..."
              if [ -s "$backup_dir/full_database.sql" ] && [ $(wc -l < "$backup_dir/full_database.sql") -gt 10 ]; then
                log "‚úÖ Sauvegarde PRODUCTION valid√©e: $backup_dir"
                echo "$backup_dir" > ".last_backup_path"
                return 0
              else
                log "‚ùå SAUVEGARDE CORROMPUE - ARR√äT CRITIQUE"
                deploy_failed "Sauvegarde invalide - protection des donn√©es"
              fi
            }
            
            # Fonction de restauration d'urgence
            emergency_restore() {
              local backup_path="$1"
              log "üö® RESTAURATION D'URGENCE depuis $backup_path"
              
              if [ -f "$backup_path/full_database.sql" ]; then
                log "üîÑ Restauration de la base compl√®te..."
                docker-compose -f docker-compose.prisma.yml exec -T db psql -U postgres -c "DROP DATABASE IF EXISTS postgres_restore;"
                docker-compose -f docker-compose.prisma.yml exec -T db psql -U postgres -c "CREATE DATABASE postgres_restore;"
                docker-compose -f docker-compose.prisma.yml exec -T db psql -U postgres postgres_restore < "$backup_path/full_database.sql"
                log "‚úÖ Base restaur√©e en postgres_restore - v√©rifiez avant de basculer"
                return 0
              else
                log "‚ùå Sauvegarde introuvable"
                return 1
              fi
            }
            
            # Ex√©cution de la sauvegarde PRODUCTION
            create_production_backup
            
            # Fonction de r√©solution intelligente des conflits
            resolve_migration_conflicts() {
              local output_file="$1"
              local retry_count="${2:-0}"
              local max_retries=3
              
              if [ $retry_count -ge $max_retries ]; then
                log "üö® Limite de tentatives atteinte ($max_retries)"
                return 1
              fi
              
              log "üîç Analyse des conflits de migration (tentative $((retry_count+1))/$max_retries)"
              
              # P3005: Base non-vide, baseline requis
              if grep -q "P3005\|schema is not empty" "$output_file"; then
                log "üîß R√©solution P3005 - Baseline automatique"
                FIRST_MIGRATION=$(docker-compose -f docker-compose.prisma.yml exec -T api sh -c "ls prisma/migrations | grep -E '^[0-9]{14}_' | head -1" | tr -d '\r\n')
                if [ -n "$FIRST_MIGRATION" ] && [ "$FIRST_MIGRATION" != "migration_lock.toml" ]; then
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$FIRST_MIGRATION"
                  return 0
                fi
              fi
              
              # P3009: Migration √©chou√©e bloquante
              if grep -q "P3009" "$output_file"; then
                log "üîß R√©solution P3009 - Migration √©chou√©e d√©tect√©e"
                FAILED_MIGRATION=$(grep -oE "The \`[0-9]{14}_[a-zA-Z0-9_]+\` migration" "$output_file" | sed 's/The `\(.*\)` migration/\1/' | head -1)
                if [ -n "$FAILED_MIGRATION" ]; then
                  log "üóëÔ∏è Marquage migration √©chou√©e comme √©chou√© puis rollback: $FAILED_MIGRATION"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --rolled-back "$FAILED_MIGRATION" || log "‚ö†Ô∏è √âchec rollback"
                  log "üîÑ Nouvelle tentative apr√®s rollback"
                  return 0
                else
                  log "‚ö†Ô∏è Impossible d'identifier la migration √©chou√©e"
                  log "üõë Arr√™t pour √©viter la perte de donn√©es - intervention manuelle requise"
                  return 1
                fi
              fi
              
              # P3018: Migration √©chou√©e
              if grep -q "P3018" "$output_file"; then
                log "üîß R√©solution P3018 - Migration √©chou√©e"
                FAILED_MIGRATION=$(grep -oE "Migration name: [0-9]{14}_[a-zA-Z0-9_]+" "$output_file" | cut -d' ' -f3 | head -1)
                [ -z "$FAILED_MIGRATION" ] && FAILED_MIGRATION=$(grep -oE "[0-9]{14}_[a-zA-Z0-9_]+" "$output_file" | head -1)
                if [ -n "$FAILED_MIGRATION" ]; then
                  log "üìå Marquage comme appliqu√©e: $FAILED_MIGRATION"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$FAILED_MIGRATION"
                  return 0
                fi
              fi
              
              # Conflits de colonnes/tables existantes
              if grep -qE "column.*already exists|relation.*already exists|constraint.*already exists" "$output_file"; then
                log "üîß R√©solution conflit sch√©ma existant"
                PENDING_MIGRATIONS=$(docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status 2>&1 | grep -A10 "following migration" | grep -oE "[0-9]{14}_[a-zA-Z0-9_]+" | head -1)
                if [ -n "$PENDING_MIGRATIONS" ]; then
                  log "üìå Marquage migration conflictuelle: $PENDING_MIGRATIONS"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$PENDING_MIGRATIONS"
                  return 0
                else
                  # Pas de fallback destructif
                  log "‚ö†Ô∏è Impossible de r√©soudre automatiquement le conflit de sch√©ma"
                  log "üõë Intervention manuelle requise pour pr√©server les donn√©es"
                  return 1
                fi
              fi
              
              # Autres erreurs Prisma
              if grep -qE "P[0-9]{4}" "$output_file"; then
                ERROR_CODE=$(grep -oE "P[0-9]{4}" "$output_file" | head -1)
                log "‚ö†Ô∏è Erreur Prisma d√©tect√©e: $ERROR_CODE"
                
                # Tentative de r√©solution g√©n√©rique
                LATEST_MIGRATION=$(docker-compose -f docker-compose.prisma.yml exec -T api sh -c "ls prisma/migrations | grep -E '^[0-9]{14}_' | tail -1" | tr -d '\r\n')
                if [ -n "$LATEST_MIGRATION" ] && [ "$LATEST_MIGRATION" != "migration_lock.toml" ]; then
                  log "üìå Marquage derni√®re migration: $LATEST_MIGRATION"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$LATEST_MIGRATION"
                  return 0
                else
                  log "‚ö†Ô∏è Aucune migration valide trouv√©e"
                  log "üõë Arr√™t pour √©viter la perte de donn√©es - v√©rification manuelle requise"
                  return 1
                fi
              fi
              
              return 1
            }
            
            # V√©rification que toutes les migrations sont appliqu√©es
            ensure_all_migrations_applied() {
              log "üîç V√©rification que toutes les migrations sont appliqu√©es"
              
              # Liste toutes les migrations disponibles
              ALL_MIGRATIONS=$(docker-compose -f docker-compose.prisma.yml exec -T api sh -c "ls prisma/migrations | grep -E '^[0-9]{14}_' | sort")
              MIGRATION_COUNT=$(echo "$ALL_MIGRATIONS" | wc -l)
              log "üìã $MIGRATION_COUNT migrations trouv√©es dans le dossier"
              
              # V√©rification du statut final
              FINAL_STATUS=$(docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status 2>&1)
              
              if echo "$FINAL_STATUS" | grep -q "Database schema is up to date"; then
                log "‚úÖ Toutes les migrations sont appliqu√©es"
                return 0
              elif echo "$FINAL_STATUS" | grep -q "pending migration"; then
                log "‚ö†Ô∏è Des migrations sont encore en attente"
                log "üîÑ Application forc√©e des migrations restantes"
                docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy
                return $?
              else
                log "‚ö†Ô∏è Statut unclear, v√©rification manuelle"
                log "üõë Synchronisation manuelle requise pour pr√©server les donn√©es"
                return 1
              fi
            }
            
            # D√©ploiement PRODUCTION ultra-s√©curis√©
            deploy_production_safe() {
              local backup_path=$(cat ".last_backup_path" 2>/dev/null || echo "")
              local attempt=0
              local max_attempts=3  # R√©duit pour production
              
              log "üîí D√âPLOIEMENT PRODUCTION - Mode conservatif"
              
              # Validation pr√©alable
              log "üîç Phase 1: Validation pr√©alable"
              CURRENT_STATUS=$(docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status 2>&1)
              
              if echo "$CURRENT_STATUS" | grep -q "Database schema is up to date"; then
                log "‚úÖ Base d√©j√† synchronis√©e - Aucune migration requise"
                return 0
              fi
              
              # Lister les migrations en attente
              log "üìã Phase 2: Analyse des migrations en attente"
              PENDING_MIGRATIONS=$(echo "$CURRENT_STATUS" | grep -A20 "pending migration" | grep -E "[0-9]{14}_" || echo "")
              
              if [ -z "$PENDING_MIGRATIONS" ]; then
                log "‚ö†Ô∏è Aucune migration en attente d√©tect√©e"
                
                # V√©rification des migrations √©chou√©es
                if echo "$CURRENT_STATUS" | grep -q "failed migration\|P3009"; then
                  log "üö® MIGRATIONS √âCHOU√âES D√âTECT√âES"
                  FAILED_MIGRATION=$(echo "$CURRENT_STATUS" | grep -oE "[0-9]{14}_[a-zA-Z0-9_]+" | head -1)
                  
                  if [ -n "$FAILED_MIGRATION" ]; then
                    log "üîß R√©solution S√âCURIS√âE de la migration √©chou√©e: $FAILED_MIGRATION"
                    log "üìå Marquage comme rolled-back (SANS perte de donn√©es)"
                    
                    if docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --rolled-back "$FAILED_MIGRATION"; then
                      log "‚úÖ Migration √©chou√©e r√©solue"
                      log "üîÑ Nouvelle tentative d'application"
                      if docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy; then
                        log "‚úÖ Migrations appliqu√©es apr√®s r√©solution"
                        return 0
                      else
                        log "‚ùå √âchec application apr√®s r√©solution"
                        return 1
                      fi
                    else
                      log "‚ùå Impossible de r√©soudre la migration √©chou√©e"
                      log "üõë ARR√äT S√âCURIS√â - Intervention manuelle requise"
                      return 1
                    fi
                  else
                    log "‚ùå Migration √©chou√©e non identifiable"
                    log "üõë ARR√äT S√âCURIS√â - Diagnostic manuel requis"
                    return 1
                  fi
                else
                  log "üîç Tentative de synchronisation douce"
                  if docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy; then
                    log "‚úÖ Synchronisation r√©ussie"
                    return 0
                  else
                    log "‚ùå Synchronisation √©chou√©e"
                    return 1
                  fi
                fi
              fi
              
              # Application s√©curis√©e des migrations en attente
              log "üîÑ Phase 3: Application S√âCURIS√âE des migrations"
              log "üìã Migrations √† appliquer:"
              echo "$PENDING_MIGRATIONS" | while read -r migration; do
                [ -n "$migration" ] && log "  - $migration"
              done
              
              # Application avec monitoring
              if docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy 2>&1 | tee production_migration.log; then
                if grep -q "successfully applied\|All migrations have been applied" production_migration.log; then
                  log "‚úÖ TOUTES LES MIGRATIONS APPLIQU√âES AVEC SUCC√àS"
                  
                  # V√©rification post-migration
                  log "üîç V√©rification post-migration"
                  FINAL_STATUS=$(docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status 2>&1)
                  if echo "$FINAL_STATUS" | grep -q "Database schema is up to date"; then
                    log "‚úÖ D√âPLOIEMENT PRODUCTION R√âUSSI"
                    rm -f production_migration.log
                    return 0
                  else
                    log "‚ö†Ô∏è Statut final incertain"
                    cat production_migration.log
                    rm -f production_migration.log
                    return 1
                  fi
                else
                  log "‚ö†Ô∏è Migrations partiellement appliqu√©es"
                  cat production_migration.log
                  rm -f production_migration.log
                  return 1
                fi
              else
                log "‚ùå √âCHEC D'APPLICATION DES MIGRATIONS"
                log "üîç Analyse des erreurs:"
                cat production_migration.log | tail -10
                
                # En cas d'√©chec, ne PAS tenter de r√©solution automatique
                log "üõë ARR√äT S√âCURIS√â POUR PROTECTION DES DONN√âES"
                log "üíæ Sauvegarde disponible: $backup_path"
                log "üîß Intervention manuelle requise"
                
                rm -f production_migration.log
                return 1
              fi
            }
            
            # Ex√©cution du d√©ploiement PRODUCTION
            if deploy_production_safe; then
              log "‚úÖ D√âPLOIEMENT PRODUCTION R√âUSSI - Donn√©es pr√©serv√©es"
              
              # Nettoyage des anciennes sauvegardes (garde les 5 derni√®res)
              log "üßπ Nettoyage des anciennes sauvegardes"
              find backups/ -name "prod_backup_*" -type d | sort -r | tail -n +6 | xargs rm -rf 2>/dev/null || true
              log "‚úÖ Maintenance des sauvegardes termin√©e"
            else
              log "‚ùå D√âPLOIEMENT PRODUCTION √âCHOU√â"
              BACKUP_PATH=$(cat ".last_backup_path" 2>/dev/null || echo "AUCUNE")
              log "üíæ Sauvegarde disponible: $BACKUP_PATH"
              log "üîß Pour restauration d'urgence:"
              log "   1. Connectez-vous au serveur"
              log "   2. Utilisez: docker-compose exec db psql -U postgres < $BACKUP_PATH/full_database.sql"
              log "   3. Red√©marrez l'application"
              
              deploy_failed "√âchec d√©ploiement PRODUCTION - Donn√©es intactes"
            fi
            
            log "üîç V√©rification finale du sch√©ma"
            docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status || log "‚ö†Ô∏è Impossible de v√©rifier le statut final"
            
            echo "$CURRENT_COMMIT" > "${APP_DIR}/.last_deploy"
            docker image prune -f > /dev/null 2>&1
            docker volume prune -f > /dev/null 2>&1
            
            log "‚úÖ D√©ploiement termin√© avec succ√®s - Commit: $CURRENT_COMMIT"

      - name: Notify deployment success
        if: success()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"‚úÖ D√©ploiement Success\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nAPI accessible\",\"color\":65280}]}"
          fi

      - name: Notify deployment failure
        if: failure()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"‚ùå D√©ploiement Failed\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nVoir les logs pour plus de d√©tails\",\"color\":15158332}]}"
          fi
