name: Deploy NestJS with Prisma to OVH VPS (Optimized)

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.should_deploy }}
      commit_hash: ${{ steps.check_changes.outputs.commit_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 2

      - name: Check for changes
        id: check_changes
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "commit_hash=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "🔄 Déploiement forcé activé"
            exit 0
          fi
          
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -qE "\.(md|txt|yml)$|^\.github/|^docs/"; then
            if ! echo "$CHANGED_FILES" | grep -qE "\.(js|ts|json|prisma|docker)$|^src/|^prisma/"; then
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "⏭️ Seuls des fichiers non critiques ont changé"
              exit 0
            fi
          fi
          
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Run tests
        if: ${{ github.event.inputs.skip_tests != 'true' && steps.check_changes.outputs.should_deploy == 'true' }}
        run: |
          npm ci
          npm run lint
          #npm run test

  deploy:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Notify deployment start
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"🚀 Déploiement Started\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\",\"color\":3447003}]}"
          fi

      - name: Deploy to OVH VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY_OVH }}
          port: 2222
          timeout: 600s
          script: |
            set -e
            VPS_ROOT="/home/deploy/app"
            APP_DIR="${VPS_ROOT}/nestjs-prisma"
            DEPLOY_LOG="${APP_DIR}/deploy.log"
            CURRENT_COMMIT="${{ needs.pre-deploy-checks.outputs.commit_hash }}"
            
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$DEPLOY_LOG"
            }
            
            deploy_failed() {
              log "❌ Déploiement échoué à l'étape: $1"
              if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
                curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                  -H 'Content-type: application/json' \
                  --data "{\"embeds\":[{\"title\":\"❌ Déploiement Failed\",\"description\":\"Erreur: $1\\nCommit: \`$CURRENT_COMMIT\`\",\"color\":15158332}]}"
              fi
              exit 1
            }
            
            trap 'deploy_failed "Script interrompu"' ERR
            log "🚀 Démarrage du déploiement optimisé - Commit: $CURRENT_COMMIT"
            
            mkdir -p "$APP_DIR" "$APP_DIR/backups"
            cd "$APP_DIR"
            
            LAST_DEPLOY_COMMIT=$(cat "${APP_DIR}/.last_deploy" 2>/dev/null || echo "")
            if [ "$CURRENT_COMMIT" = "$LAST_DEPLOY_COMMIT" ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              log "⏭️ Même commit détecté ($CURRENT_COMMIT), skip du déploiement"
              exit 0
            fi
            
            log "📋 Phase 1: Validation de l'environnement"
            if [ -f "${APP_DIR}/.env.dev" ]; then
              source "${APP_DIR}/.env.dev"
            fi
            
            log "🧹 Phase 2: Sauvegarde et nettoyage"
            if docker-compose -f docker-compose.prisma.yml ps -q > /dev/null 2>&1; then
              log "💾 Sauvegarde état actuel"
              docker-compose -f docker-compose.prisma.yml down
            fi
            docker rm -f postgres_db traefik api nestjs_api 2>/dev/null || true
            
            log "📦 Phase 3: Mise à jour du code"
            TMP_DIR=$(mktemp -d)
            git clone --filter=blob:none --depth=1 --branch=develop https://github.com/natalie-simon/assbt_api.git "$TMP_DIR"
            cd "$APP_DIR"
            find . -mindepth 1 \
              -not -path "./backups*" \
              -not -name ".env.dev*" \
              -not -name ".last_deploy*" \
              -not -name "deploy.log*" \
              -exec rm -rf {} \; 2>/dev/null || true
            cp -R "$TMP_DIR"/* "$APP_DIR"/
            cp -R "$TMP_DIR"/.* "$APP_DIR"/ 2>/dev/null || true
            rm -rf "$TMP_DIR"
            
            log "🐳 Phase 4: Build et démarrage des services"
            cd "$APP_DIR"
            docker-compose -f docker-compose.prisma.yml build --parallel || deploy_failed "Échec du build Docker"
            docker-compose -f docker-compose.prisma.yml up -d db || deploy_failed "Échec DB"
            
            RETRIES=20; RETRY_COUNT=0
            until docker-compose -f docker-compose.prisma.yml exec -T db pg_isready -q || [ $RETRY_COUNT -eq $RETRIES ]; do
              log "🔄 Attente PostgreSQL... ($((RETRY_COUNT+1))/$RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 3
            done
            
            docker-compose -f docker-compose.prisma.yml up -d || deploy_failed "Échec démarrage services"
            
            log "🔄 Phase 5: Gestion avancée des migrations Prisma"
            docker-compose -f docker-compose.prisma.yml exec -T api npx prisma generate || deploy_failed "Échec generate"
            
            log "💾 Sauvegarde de la base avant migration"
            BACKUP_FILE="backups/db_backup_$(date +%Y%m%d_%H%M%S).sql"
            docker-compose -f docker-compose.prisma.yml exec -T db pg_dump -U postgres postgres > "$BACKUP_FILE" || log "⚠️ Échec sauvegarde DB"
            
            # Fonction de résolution intelligente des conflits
            resolve_migration_conflicts() {
              local output_file="$1"
              local retry_count="${2:-0}"
              local max_retries=3
              
              if [ $retry_count -ge $max_retries ]; then
                log "🚨 Limite de tentatives atteinte ($max_retries)"
                return 1
              fi
              
              log "🔍 Analyse des conflits de migration (tentative $((retry_count+1))/$max_retries)"
              
              # P3005: Base non-vide, baseline requis
              if grep -q "P3005\|schema is not empty" "$output_file"; then
                log "🔧 Résolution P3005 - Baseline automatique"
                FIRST_MIGRATION=$(docker-compose -f docker-compose.prisma.yml exec -T api ls prisma/migrations 2>/dev/null | head -1 | tr -d '\r\n')
                if [ -n "$FIRST_MIGRATION" ]; then
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$FIRST_MIGRATION"
                  return 0
                fi
              fi
              
              # P3018: Migration échouée
              if grep -q "P3018" "$output_file"; then
                log "🔧 Résolution P3018 - Migration échouée"
                FAILED_MIGRATION=$(grep -oE "Migration name: [0-9]{14}_[a-zA-Z0-9_]+" "$output_file" | cut -d' ' -f3 | head -1)
                [ -z "$FAILED_MIGRATION" ] && FAILED_MIGRATION=$(grep -oE "[0-9]{14}_[a-zA-Z0-9_]+" "$output_file" | head -1)
                if [ -n "$FAILED_MIGRATION" ]; then
                  log "📌 Marquage comme appliquée: $FAILED_MIGRATION"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$FAILED_MIGRATION"
                  return 0
                fi
              fi
              
              # Conflits de colonnes/tables existantes
              if grep -qE "column.*already exists|relation.*already exists|constraint.*already exists" "$output_file"; then
                log "🔧 Résolution conflit schéma existant"
                PENDING_MIGRATIONS=$(docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status 2>&1 | grep -A10 "following migration" | grep -oE "[0-9]{14}_[a-zA-Z0-9_]+" | head -1)
                if [ -n "$PENDING_MIGRATIONS" ]; then
                  log "📌 Marquage migration conflictuelle: $PENDING_MIGRATIONS"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$PENDING_MIGRATIONS"
                  return 0
                else
                  # Fallback: synchronisation directe
                  log "🔄 Synchronisation directe du schéma"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma db push --force-reset
                  return 2  # Code spécial pour schéma push
                fi
              fi
              
              # Autres erreurs Prisma
              if grep -qE "P[0-9]{4}" "$output_file"; then
                ERROR_CODE=$(grep -oE "P[0-9]{4}" "$output_file" | head -1)
                log "⚠️ Erreur Prisma détectée: $ERROR_CODE"
                
                # Tentative de résolution générique
                LATEST_MIGRATION=$(docker-compose -f docker-compose.prisma.yml exec -T api ls prisma/migrations 2>/dev/null | tail -1 | tr -d '\r\n')
                if [ -n "$LATEST_MIGRATION" ]; then
                  log "📌 Marquage dernière migration: $LATEST_MIGRATION"
                  docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate resolve --applied "$LATEST_MIGRATION"
                  return 0
                fi
              fi
              
              return 1
            }
            
            # Déploiement avec résolution automatique des conflits
            deploy_with_conflict_resolution() {
              local attempt=0
              local max_attempts=5
              
              while [ $attempt -lt $max_attempts ]; do
                attempt=$((attempt + 1))
                log "🚀 Tentative de déploiement $attempt/$max_attempts"
                
                # Vérification du statut
                MIGRATION_STATUS=$(docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status 2>&1)
                
                if echo "$MIGRATION_STATUS" | grep -q "Database schema is up to date"; then
                  log "✅ Base de données déjà à jour"
                  return 0
                fi
                
                # Tentative de déploiement
                docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate deploy 2>&1 | tee migration_attempt_$attempt.log
                
                if grep -q "successfully applied\|All migrations have been applied" migration_attempt_$attempt.log; then
                  log "✅ Migrations appliquées avec succès"
                  rm -f migration_attempt_*.log
                  return 0
                fi
                
                # Résolution des conflits
                if resolve_migration_conflicts "migration_attempt_$attempt.log" $attempt; then
                  resolve_result=$?
                  if [ $resolve_result -eq 2 ]; then
                    log "✅ Schéma synchronisé par push"
                    rm -f migration_attempt_*.log
                    return 0
                  fi
                  log "🔄 Conflit résolu, nouvelle tentative..."
                  continue
                else
                  log "⚠️ Impossible de résoudre le conflit à la tentative $attempt"
                fi
                
                sleep 2
              done
              
              log "🚨 Échec après $max_attempts tentatives"
              cat migration_attempt_*.log | tail -20
              rm -f migration_attempt_*.log
              return 1
            }
            
            # Exécution du déploiement intelligent
            if deploy_with_conflict_resolution; then
              log "✅ Déploiement des migrations réussi"
            else
              deploy_failed "Échec final du déploiement des migrations"
            fi
            
            log "🔍 Vérification finale du schéma"
            docker-compose -f docker-compose.prisma.yml exec -T api npx prisma migrate status || log "⚠️ Impossible de vérifier le statut final"
            
            echo "$CURRENT_COMMIT" > "${APP_DIR}/.last_deploy"
            docker image prune -f > /dev/null 2>&1
            docker volume prune -f > /dev/null 2>&1
            
            log "✅ Déploiement terminé avec succès - Commit: $CURRENT_COMMIT"

      - name: Notify deployment success
        if: success()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"✅ Déploiement Success\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nAPI accessible\",\"color\":65280}]}"
          fi

      - name: Notify deployment failure
        if: failure()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{\"embeds\":[{\"title\":\"❌ Déploiement Failed\",\"description\":\"Commit: \`${{ needs.pre-deploy-checks.outputs.commit_hash }}\`\\nVoir les logs pour plus de détails\",\"color\":15158332}]}"
          fi
