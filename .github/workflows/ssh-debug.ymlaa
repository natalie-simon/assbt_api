name: CI/CD Docker Dev Deployment debug

on:
  push:
    branches:
      - develop # Uniquement la branche develop
  workflow_dispatch: # Pour pouvoir déclencher manuellement

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      #- name: Run tests
      #  run: npm run test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}-api:develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH with verbose output
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          # Test basic SSH connection
          ssh -i ~/.ssh/id_rsa -v ubuntu@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH connection successful'"

      - name: Prepare deployment environment on EC2
        run: |
          # Create all directories needed with one command
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} "sudo mkdir -p /home/ubuntu/apps/bulleurs-toulonnais && sudo chown -R ubuntu:ubuntu /home/ubuntu/apps"

          # Check if the directory was created successfully
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} "ls -la /home/ubuntu/apps/bulleurs-toulonnais"

      - name: Prepare .env file
        run: |
          cat > .env << EOF
          # Configuration de base
          NODE_ENV=test
          LISTEN_PORT=3000

          # Configuration de la base de données
          DB_HOST=postgres-db
          DB_PORT=5432
          DB_USERNAME=postgres
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=assbt_api_test

          # Configuration du déploiement
          GITHUB_REPOSITORY=${{ github.repository }}
          EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          RUN_MIGRATIONS=true
          TAG=develop
          EOF

      - name: Copy deployment files to EC2
        run: |
          # Create a deploy directory locally to organize files
          mkdir -p deploy_files

          # Copy the necessary files to this directory
          cp ./deploy/docker-compose.yml deploy_files/
          cp ./deploy/deploy.sh deploy_files/
          cp ./.env deploy_files/

          # Make the deployment script executable
          chmod +x deploy_files/deploy.sh

          # Copy all files at once
          scp -r -i ~/.ssh/id_rsa deploy_files/* ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/apps/bulleurs-toulonnais/

          # Verify files were copied
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} "ls -la /home/ubuntu/apps/bulleurs-toulonnais/"

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} << EOF
            cd /home/ubuntu/apps/bulleurs-toulonnais/
            chmod +x deploy.sh
            ./deploy.sh test develop
          EOF

      - name: Send success email
        if: success()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{secrets.SMTP_ADRESS}}
          server_port: ${{secrets.SMTP_PORT}}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Déploiement Docker réussi sur l'environnement de test"
          body: "Le déploiement Docker de l'API sur l'environnement de test a été effectué avec succès. Tag de l'image: develop"
          to: ybah2201@gmail.com
          from: ybah2201@gmail.com

      - name: Send failure email
        if: failure()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{secrets.SMTP_ADRESS}}
          server_port: ${{secrets.SMTP_PORT}}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Echec de déploiement Docker sur l'environnement de test"
          body: "Le déploiement Docker de l'API sur l'environnement de test a échoué."
          to: ybah2201@gmail.com
          from: ybah2201@gmail.com
