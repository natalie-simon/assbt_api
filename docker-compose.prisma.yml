version: '3.8'

services:
  # Service pour l'API NestJS - en utilisant une image précompilée
  api:
    image: node:18-alpine  # Utiliser une image Node.js précompilée
    container_name: nestjs_api
    restart: always
    working_dir: /app
    volumes:
      - ./:/app  # Monter le répertoire actuel dans le container
    command: >
      sh -c "npm install && npm run start:dev"
      sh -c "npx prisma generate && npm run start:dev"
    env_file:
      - ./.env.${ENV:-dev}
    environment:
      - DB_HOST=db
      - ORIGIN=*
      - DATABASE_URL=postgresql://${DB_USERNAME:-postgres}:${DB_PASSWORD:-admin}@db:5432/${DB_NAME:-Assbt}?schema=public
    ports:
      - "${LISTEN_PORT:-3000}:3000"
    depends_on:
      - db
    networks:
      - app_network

  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-admin}
      - POSTGRES_DB=${DB_NAME:-Assbt}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-Assbt}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Traefik (reverse proxy)
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/etc/traefik/acme
    networks:
      - app_network
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${MAIL_ADMIN:-ybah2201@gmail.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--api.dashboard=true"
    labels:
      - "traefik.enable=true"
      # Configuration pour l'API
      - "traefik.http.routers.api.rule=Host(`api-prod.lesbulleurstoulonnais.fr`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      - "traefik.docker.network=app_network"
      # Dashboard Traefik
      - "traefik.http.routers.dashboard.rule=Host(`traefik.api-prod.lesbulleurstoulonnais.fr`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$xyz..." # À remplacer par votre hash généré

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  traefik_data: