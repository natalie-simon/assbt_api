version: '3.8'

services:
  api:
    container_name: nestjs_api
    build:
      context: .
      dockerfile: ./deploy/docker/Dockerfile.prod
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${POSTGRES_DB}
      - PORT=3000
    networks:
      - app-network
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api-prod.lesbulleurstoulonnais.fr`)"
      - "traefik.http.routers.api.entrypoints=https"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3000"

  postgres:
    container_name: postgres_db
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    container_name: traefik
    image: traefik:v2.10
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./deploy/docker/traefik/config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./deploy/docker/traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik_certificates:/etc/traefik/acme
    networks:
      - web
    labels:
      - "traefik.enable=true"
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`traefik.lesbulleurstoulonnais.fr`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=https"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

networks:
  app-network:
    driver: bridge
  web:
    driver: bridge

volumes:
  postgres_data:
  traefik_certificates: